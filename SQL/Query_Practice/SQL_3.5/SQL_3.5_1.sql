-- Case 1
-- Create a database called "sales" with three tables: "customers", 
-- "orders", and "products".

CREATE TABLE customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100),
    phone VARCHAR(20)
);

INSERT INTO customers (customer_id, first_name, last_name, email, phone)
VALUES 
  (1, 'John', 'Doe', 'johndoe@example.com', '555-1234'),
  (2, 'Jane', 'Doe', 'janedoe@example.com', '555-5678'),
  (3, 'Bob', 'Smith', 'bobsmith@example.com', '555-9012'),
  (4, 'Alice', 'Johnson', 'alicejohnson@example.com', '555-3456'),
  (5, 'Mike', 'Brown', 'mikebrown@example.com', '555-7890'),
  (6, 'Emily', 'Davis', 'emilydavis@example.com', '555-2345'),
  (7, 'Sam', 'Wilson', 'samwilson@example.com', '555-6789'),
  (8, 'Olivia', 'Lee', 'olivialeee@example.com', '555-0123'),
  (9, 'David', 'Clark', 'davidclark@example.com', '555-4567'),
  (10, 'Samantha', 'Jones', 'samanthajones@example.com', '555-8901');


-- The "orders" table should have the following columns: 
-- "order_id", "order_date", "customer_id", and "product_id".

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    customer_id INT,
    product_id INT,
    FOREIGN KEY (customer_id)
        REFERENCES customers (customer_id),
    FOREIGN KEY (product_id)
        REFERENCES products (product_id)
);

INSERT INTO orders (order_id, order_date, customer_id, product_id)
VALUES 
  (1, '2022-01-01', 1, 1),
  (2, '2022-01-02', 2, 2),
  (3, '2022-01-03', 3, 3),
  (4, '2022-01-04', 4, 4),
  (5, '2022-01-05', 5, 5),
  (6, '2022-01-06', 6, 6),
  (7, '2022-01-07', 7, 7),
  (8, '2022-01-08', 8, 8),
  (9, '2022-01-09', 9, 9),
  (10, '2022-01-10', 10, 10),
  (11, '2022-01-08', 8, 8),
  (12, '2022-01-09', 9, 9),
  (13, '2022-01-10', 10, 10);






-- The "products" table should have the following columns: 
-- "product_id", "product_name", "unit_price", and "description".

CREATE TABLE products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    unit_price DECIMAL(10 , 2 ),
    description TEXT
);

INSERT INTO products (product_id, product_name, unit_price, description)
VALUES 
  (1, 'Product A', 10.99, 'This is Product A.'),
  (2, 'Product B', 20.99, 'This is Product B.'),
  (3, 'Product C', 30.99, 'This is Product C.'),
  (4, 'Product D', 40.99, 'This is Product D.'),
  (5, 'Product E', 50.99, 'This is Product E.'),
  (6, 'Product F', 60.99, 'This is Product F.'),
  (7, 'Product G', 70.99, 'This is Product G.'),
  (8, 'Product H', 80.99, 'This is Product H.'),
  (9, 'Product I', 90.99, 'This is Product I.'),
  (10, 'Product J', 100.99, 'This is Product J.');


-- 1. Insert at least five customers, five products, and ten 
-- orders into the respective tables. Make sure that at least 
-- two customers have multiple orders, and at least two 
-- products are included in multiple orders.



SELECT 
    customers.customer_id,
    customers.first_name,
    customers.email,
    orders.order_id,
    COUNT(orders.customer_id)
FROM
    customers
        INNER JOIN
    orders ON customers.customer_id = orders.customer_id
GROUP BY Customers.customer_id
ORDER BY COUNT(orders.customer_id) DESC;


-- 3. Write a query that retrieves the product name, the total 
-- number of orders for each product, and the total revenue 
-- generated by each product. The results should be ordered by 
-- the total revenue in descending order.

SELECT 
    products.product_name,
    products.unit_price * COUNT(orders.product_id) AS revenue_Of_Product,
    COUNT(orders.product_id) AS number_Of_orders,
    orders.order_id
FROM
    products
        INNER JOIN
    orders ON orders.product_id = products.product_id
GROUP BY product_name
ORDER BY revenue_Of_Product DESC;

-- 4. Write a query that retrieves the first name, last name, 
-- email, and product name for each order. The results should 
-- only include orders where the customer has placed multiple 
-- orders.

SELECT 
    customers.customer_id,
    customers.first_name,
    customers.last_name,
    customers.email,
    products.product_name,
    COUNT(orders.customer_id) AS number_Of_orders
FROM
    customers
        INNER JOIN
    orders ON customers.customer_id = orders.customer_id
        INNER JOIN
    products ON products.product_id = orders.product_id
GROUP BY customer_id
HAVING number_Of_orders > 1
ORDER BY number_Of_orders DESC;

-- 5. Write a query that retrieves the first name, last name, and 
-- email for each customer who has placed at least one order 
-- for a product with a unit price greater than $50.

SELECT 
    customers.customer_id,
    customers.first_name,
    customers.last_name,
    customers.email,
    products.product_name,
    products.unit_price AS revenue_Of_Product,
    COUNT(orders.product_id) AS number_Of_orders
FROM
    customers
        INNER JOIN
    orders ON customers.customer_id = orders.customer_id
        INNER JOIN
    products ON products.product_id = orders.product_id
GROUP BY customer_id
HAVING number_Of_orders >= 1
    AND revenue_Of_Product > 50
ORDER BY number_Of_orders DESC;


-- 6. Write a query that retrieves the product name and the 
-- number of times it has been ordered, but only includes 
-- products that have been ordered more than once

SELECT 
    products.product_name,
    products.unit_price * COUNT(orders.product_id) AS revenue_Of_Product,
    COUNT(orders.product_id) AS number_Of_orders,
    orders.order_id
FROM
    products
        INNER JOIN
    orders ON orders.product_id = products.product_id
GROUP BY product_name
HAVING number_Of_orders > 1
ORDER BY revenue_Of_Product DESC;